#!/usr/bin/env python3

import socket
import time
import argparse
import sys
import threading
import re

quit = False
# lock is used to protect the period modification
lock = threading.Lock()
period = -1.0

class SyncSocket:
    def __init__(self, timeout, host, port):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.dest = (host, port)
        self.timeout = timeout

    def connect(self):
        begin = time.time()
        connected = False
        while not connected and (time.time() - begin < self.timeout):
            try:
                self.sock.connect(self.dest)
                connected = True
            except ConnectionRefusedError:
                time.sleep(0.5)
        return connected

    def send(self):
        self.sock.send(b'sync')


class InputThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self._set_period_pattern = re.compile("^set_period (\d+\.?\d*)")

    def run(self):
        global quit
        while not quit:
            text_in = input()
            self._process(text_in)

    def _process(self, text_in):
        if text_in == "quit":
            # unlocked access, but should be fine
            global quit
            quit = True
            return

        set_period_match = self._set_period_pattern.match(text_in)
        if set_period_match:
            new_period = float(set_period_match.group(1))
            if new_period < 0.0:
                print("Invalid period value %f" % new_period)
                return

            global lock
            global period
            with lock:
                period = new_period

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='MORSE syncer')

    parser.add_argument('-p', '--period', help="period of synchronisation (in s)", type=float)
    parser.add_argument('-t', '--timeout', default=10.0, help="connect timeout (in s)", type=float)
    parser.add_argument('-H', '--host', default="localhost", help="MORSE socket sync addr")
    parser.add_argument('-P', '--port', help="MORSE socket sync port", type=int)

    args = parser.parse_args()

    s = SyncSocket(args.timeout, args.host, args.port)

    input_thr = InputThread()
    input_thr.start()

    period = args.period

    if not s.connect():
        print("Failed to connect to (%s, %s)" % (args.host, args.port))
        sys.exit()

    while not quit:
        s.send()
        with lock:
            time.sleep(period)

    input_thr.join()
